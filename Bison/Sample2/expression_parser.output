Terminals unused in grammar

   TK_EOF
   TK_ERROR


State 54 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 63 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: opt_eols statement_list opt_eols

    2 statement_list: statement_list eols stmt
    3               | stmt

    4 stmt: print
    5     | assign
    6     | if_stmt

    7 opt_eols: eols
    8         | %empty

    9 opt_eol: TK_EOL
   10        | %empty

   11 eols: eols TK_EOL
   12     | TK_EOL

   13 if_stmt: TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt

   14 conditional_expr: expr compare_options expr

   15 optional_else_stmt: TK_RW_ELSE block_statement
   16                   | %empty

   17 block_statement: opt_eol stmt opt_eol
   18                | opt_eol TK_L_BRACE statement_list TK_R_BRACE opt_eol

   19 compare_options: TK_COMP_EQUAL
   20                | TK_COMP_NEQUAL
   21                | TK_COMP_GREATER
   22                | TK_COMP_GREATER_EQUAL
   23                | TK_COMP_LESS
   24                | TK_COMP_LESS_EQUAL

   25 print: TK_RW_PRINT expr
   26      | TK_RW_PRINT expr TK_COMMA print_option

   27 print_option: TK_BIN
   28             | TK_HEX
   29             | TK_DEC

   30 assign: TK_VARIABLE TK_EQUAL expr

   31 expr: expr OP_ADD term
   32     | expr OP_SUB term
   33     | term

   34 term: term OP_MULT factor
   35     | term OP_DIV factor
   36     | factor

   37 factor: TK_NUMBER
   38       | TK_VARIABLE
   39       | TK_L_PAR expr TK_R_PAR


Terminals, with rules where they appear

$end (0) 0
error (256)
OP_ADD (258) 31
OP_SUB (259) 32
OP_MULT (260) 34
OP_DIV (261) 35
TK_L_PAR (262) 13 39
TK_R_PAR (263) 13 39
TK_NUMBER (264) 37
TK_VARIABLE (265) 30 38
TK_HEX (266) 28
TK_BIN (267) 27
TK_DEC (268) 29
TK_EOL (269) 9 11 12
TK_EOF (270)
TK_ERROR (271)
TK_EQUAL (272) 30
TK_RW_PRINT (273) 25 26
TK_COMMA (274) 26
TK_RW_IF (275) 13
TK_RW_ELSE (276) 15
TK_R_BRACE (277) 18
TK_L_BRACE (278) 18
TK_COMP_GREATER (279) 21
TK_COMP_GREATER_EQUAL (280) 22
TK_COMP_LESS (281) 23
TK_COMP_NEQUAL (282) 20
TK_COMP_LESS_EQUAL (283) 24
TK_COMP_EQUAL (284) 19


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
input (31)
    on left: 1, on right: 0
statement_list (32)
    on left: 2 3, on right: 1 2 18
stmt (33)
    on left: 4 5 6, on right: 2 3 17
opt_eols (34)
    on left: 7 8, on right: 1
opt_eol (35)
    on left: 9 10, on right: 17 18
eols (36)
    on left: 11 12, on right: 2 7 11
if_stmt (37)
    on left: 13, on right: 6
conditional_expr (38)
    on left: 14, on right: 13
optional_else_stmt (39)
    on left: 15 16, on right: 13
block_statement (40)
    on left: 17 18, on right: 13 15
compare_options (41)
    on left: 19 20 21 22 23 24, on right: 14
print (42)
    on left: 25 26, on right: 4
print_option (43)
    on left: 27 28 29, on right: 26
assign (44)
    on left: 30, on right: 5
expr (45)
    on left: 31 32 33, on right: 14 25 26 30 31 32 39
term (46)
    on left: 34 35 36, on right: 31 32 33 34 35
factor (47)
    on left: 37 38 39, on right: 34 35 36


State 0

    0 $accept: . input $end
    1 input: . opt_eols statement_list opt_eols
    7 opt_eols: . eols
    8         | . %empty  [TK_VARIABLE, TK_RW_PRINT, TK_RW_IF]
   11 eols: . eols TK_EOL
   12     | . TK_EOL

    TK_EOL  shift, and go to state 1

    $default  reduce using rule 8 (opt_eols)

    input     go to state 2
    opt_eols  go to state 3
    eols      go to state 4


State 1

   12 eols: TK_EOL .

    $default  reduce using rule 12 (eols)


State 2

    0 $accept: input . $end

    $end  shift, and go to state 5


State 3

    1 input: opt_eols . statement_list opt_eols
    2 statement_list: . statement_list eols stmt
    3               | . stmt
    4 stmt: . print
    5     | . assign
    6     | . if_stmt
   13 if_stmt: . TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt
   25 print: . TK_RW_PRINT expr
   26      | . TK_RW_PRINT expr TK_COMMA print_option
   30 assign: . TK_VARIABLE TK_EQUAL expr

    TK_VARIABLE  shift, and go to state 6
    TK_RW_PRINT  shift, and go to state 7
    TK_RW_IF     shift, and go to state 8

    statement_list  go to state 9
    stmt            go to state 10
    if_stmt         go to state 11
    print           go to state 12
    assign          go to state 13


State 4

    7 opt_eols: eols .  [TK_VARIABLE, TK_RW_PRINT, TK_RW_IF]
   11 eols: eols . TK_EOL

    TK_EOL  shift, and go to state 14

    $default  reduce using rule 7 (opt_eols)


State 5

    0 $accept: input $end .

    $default  accept


State 6

   30 assign: TK_VARIABLE . TK_EQUAL expr

    TK_EQUAL  shift, and go to state 15


State 7

   25 print: TK_RW_PRINT . expr
   26      | TK_RW_PRINT . expr TK_COMMA print_option
   31 expr: . expr OP_ADD term
   32     | . expr OP_SUB term
   33     | . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    expr    go to state 19
    term    go to state 20
    factor  go to state 21


State 8

   13 if_stmt: TK_RW_IF . TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt

    TK_L_PAR  shift, and go to state 22


State 9

    1 input: opt_eols statement_list . opt_eols
    2 statement_list: statement_list . eols stmt
    7 opt_eols: . eols
    8         | . %empty  [$end]
   11 eols: . eols TK_EOL
   12     | . TK_EOL

    TK_EOL  shift, and go to state 1

    $default  reduce using rule 8 (opt_eols)

    opt_eols  go to state 23
    eols      go to state 24


State 10

    3 statement_list: stmt .

    $default  reduce using rule 3 (statement_list)


State 11

    6 stmt: if_stmt .

    $default  reduce using rule 6 (stmt)


State 12

    4 stmt: print .

    $default  reduce using rule 4 (stmt)


State 13

    5 stmt: assign .

    $default  reduce using rule 5 (stmt)


State 14

   11 eols: eols TK_EOL .

    $default  reduce using rule 11 (eols)


State 15

   30 assign: TK_VARIABLE TK_EQUAL . expr
   31 expr: . expr OP_ADD term
   32     | . expr OP_SUB term
   33     | . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    expr    go to state 25
    term    go to state 20
    factor  go to state 21


State 16

   31 expr: . expr OP_ADD term
   32     | . expr OP_SUB term
   33     | . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR
   39       | TK_L_PAR . expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    expr    go to state 26
    term    go to state 20
    factor  go to state 21


State 17

   37 factor: TK_NUMBER .

    $default  reduce using rule 37 (factor)


State 18

   38 factor: TK_VARIABLE .

    $default  reduce using rule 38 (factor)


State 19

   25 print: TK_RW_PRINT expr .  [$end, TK_EOL, TK_RW_ELSE, TK_R_BRACE]
   26      | TK_RW_PRINT expr . TK_COMMA print_option
   31 expr: expr . OP_ADD term
   32     | expr . OP_SUB term

    OP_ADD    shift, and go to state 27
    OP_SUB    shift, and go to state 28
    TK_COMMA  shift, and go to state 29

    $default  reduce using rule 25 (print)


State 20

   33 expr: term .  [$end, OP_ADD, OP_SUB, TK_R_PAR, TK_EOL, TK_COMMA, TK_RW_ELSE, TK_R_BRACE, TK_COMP_GREATER, TK_COMP_GREATER_EQUAL, TK_COMP_LESS, TK_COMP_NEQUAL, TK_COMP_LESS_EQUAL, TK_COMP_EQUAL]
   34 term: term . OP_MULT factor
   35     | term . OP_DIV factor

    OP_MULT  shift, and go to state 30
    OP_DIV   shift, and go to state 31

    $default  reduce using rule 33 (expr)


State 21

   36 term: factor .

    $default  reduce using rule 36 (term)


State 22

   13 if_stmt: TK_RW_IF TK_L_PAR . conditional_expr TK_R_PAR block_statement optional_else_stmt
   14 conditional_expr: . expr compare_options expr
   31 expr: . expr OP_ADD term
   32     | . expr OP_SUB term
   33     | . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    conditional_expr  go to state 32
    expr              go to state 33
    term              go to state 20
    factor            go to state 21


State 23

    1 input: opt_eols statement_list opt_eols .

    $default  reduce using rule 1 (input)


State 24

    2 statement_list: statement_list eols . stmt
    4 stmt: . print
    5     | . assign
    6     | . if_stmt
    7 opt_eols: eols .  [$end]
   11 eols: eols . TK_EOL
   13 if_stmt: . TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt
   25 print: . TK_RW_PRINT expr
   26      | . TK_RW_PRINT expr TK_COMMA print_option
   30 assign: . TK_VARIABLE TK_EQUAL expr

    TK_VARIABLE  shift, and go to state 6
    TK_EOL       shift, and go to state 14
    TK_RW_PRINT  shift, and go to state 7
    TK_RW_IF     shift, and go to state 8

    $default  reduce using rule 7 (opt_eols)

    stmt     go to state 34
    if_stmt  go to state 11
    print    go to state 12
    assign   go to state 13


State 25

   30 assign: TK_VARIABLE TK_EQUAL expr .  [$end, TK_EOL, TK_RW_ELSE, TK_R_BRACE]
   31 expr: expr . OP_ADD term
   32     | expr . OP_SUB term

    OP_ADD  shift, and go to state 27
    OP_SUB  shift, and go to state 28

    $default  reduce using rule 30 (assign)


State 26

   31 expr: expr . OP_ADD term
   32     | expr . OP_SUB term
   39 factor: TK_L_PAR expr . TK_R_PAR

    OP_ADD    shift, and go to state 27
    OP_SUB    shift, and go to state 28
    TK_R_PAR  shift, and go to state 35


State 27

   31 expr: expr OP_ADD . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    term    go to state 36
    factor  go to state 21


State 28

   32 expr: expr OP_SUB . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    term    go to state 37
    factor  go to state 21


State 29

   26 print: TK_RW_PRINT expr TK_COMMA . print_option
   27 print_option: . TK_BIN
   28             | . TK_HEX
   29             | . TK_DEC

    TK_HEX  shift, and go to state 38
    TK_BIN  shift, and go to state 39
    TK_DEC  shift, and go to state 40

    print_option  go to state 41


State 30

   34 term: term OP_MULT . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    factor  go to state 42


State 31

   35 term: term OP_DIV . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    factor  go to state 43


State 32

   13 if_stmt: TK_RW_IF TK_L_PAR conditional_expr . TK_R_PAR block_statement optional_else_stmt

    TK_R_PAR  shift, and go to state 44


State 33

   14 conditional_expr: expr . compare_options expr
   19 compare_options: . TK_COMP_EQUAL
   20                | . TK_COMP_NEQUAL
   21                | . TK_COMP_GREATER
   22                | . TK_COMP_GREATER_EQUAL
   23                | . TK_COMP_LESS
   24                | . TK_COMP_LESS_EQUAL
   31 expr: expr . OP_ADD term
   32     | expr . OP_SUB term

    OP_ADD                 shift, and go to state 27
    OP_SUB                 shift, and go to state 28
    TK_COMP_GREATER        shift, and go to state 45
    TK_COMP_GREATER_EQUAL  shift, and go to state 46
    TK_COMP_LESS           shift, and go to state 47
    TK_COMP_NEQUAL         shift, and go to state 48
    TK_COMP_LESS_EQUAL     shift, and go to state 49
    TK_COMP_EQUAL          shift, and go to state 50

    compare_options  go to state 51


State 34

    2 statement_list: statement_list eols stmt .

    $default  reduce using rule 2 (statement_list)


State 35

   39 factor: TK_L_PAR expr TK_R_PAR .

    $default  reduce using rule 39 (factor)


State 36

   31 expr: expr OP_ADD term .  [$end, OP_ADD, OP_SUB, TK_R_PAR, TK_EOL, TK_COMMA, TK_RW_ELSE, TK_R_BRACE, TK_COMP_GREATER, TK_COMP_GREATER_EQUAL, TK_COMP_LESS, TK_COMP_NEQUAL, TK_COMP_LESS_EQUAL, TK_COMP_EQUAL]
   34 term: term . OP_MULT factor
   35     | term . OP_DIV factor

    OP_MULT  shift, and go to state 30
    OP_DIV   shift, and go to state 31

    $default  reduce using rule 31 (expr)


State 37

   32 expr: expr OP_SUB term .  [$end, OP_ADD, OP_SUB, TK_R_PAR, TK_EOL, TK_COMMA, TK_RW_ELSE, TK_R_BRACE, TK_COMP_GREATER, TK_COMP_GREATER_EQUAL, TK_COMP_LESS, TK_COMP_NEQUAL, TK_COMP_LESS_EQUAL, TK_COMP_EQUAL]
   34 term: term . OP_MULT factor
   35     | term . OP_DIV factor

    OP_MULT  shift, and go to state 30
    OP_DIV   shift, and go to state 31

    $default  reduce using rule 32 (expr)


State 38

   28 print_option: TK_HEX .

    $default  reduce using rule 28 (print_option)


State 39

   27 print_option: TK_BIN .

    $default  reduce using rule 27 (print_option)


State 40

   29 print_option: TK_DEC .

    $default  reduce using rule 29 (print_option)


State 41

   26 print: TK_RW_PRINT expr TK_COMMA print_option .

    $default  reduce using rule 26 (print)


State 42

   34 term: term OP_MULT factor .

    $default  reduce using rule 34 (term)


State 43

   35 term: term OP_DIV factor .

    $default  reduce using rule 35 (term)


State 44

    9 opt_eol: . TK_EOL
   10        | . %empty  [TK_VARIABLE, TK_RW_PRINT, TK_RW_IF, TK_L_BRACE]
   13 if_stmt: TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR . block_statement optional_else_stmt
   17 block_statement: . opt_eol stmt opt_eol
   18                | . opt_eol TK_L_BRACE statement_list TK_R_BRACE opt_eol

    TK_EOL  shift, and go to state 52

    $default  reduce using rule 10 (opt_eol)

    opt_eol          go to state 53
    block_statement  go to state 54


State 45

   21 compare_options: TK_COMP_GREATER .

    $default  reduce using rule 21 (compare_options)


State 46

   22 compare_options: TK_COMP_GREATER_EQUAL .

    $default  reduce using rule 22 (compare_options)


State 47

   23 compare_options: TK_COMP_LESS .

    $default  reduce using rule 23 (compare_options)


State 48

   20 compare_options: TK_COMP_NEQUAL .

    $default  reduce using rule 20 (compare_options)


State 49

   24 compare_options: TK_COMP_LESS_EQUAL .

    $default  reduce using rule 24 (compare_options)


State 50

   19 compare_options: TK_COMP_EQUAL .

    $default  reduce using rule 19 (compare_options)


State 51

   14 conditional_expr: expr compare_options . expr
   31 expr: . expr OP_ADD term
   32     | . expr OP_SUB term
   33     | . term
   34 term: . term OP_MULT factor
   35     | . term OP_DIV factor
   36     | . factor
   37 factor: . TK_NUMBER
   38       | . TK_VARIABLE
   39       | . TK_L_PAR expr TK_R_PAR

    TK_L_PAR     shift, and go to state 16
    TK_NUMBER    shift, and go to state 17
    TK_VARIABLE  shift, and go to state 18

    expr    go to state 55
    term    go to state 20
    factor  go to state 21


State 52

    9 opt_eol: TK_EOL .

    $default  reduce using rule 9 (opt_eol)


State 53

    4 stmt: . print
    5     | . assign
    6     | . if_stmt
   13 if_stmt: . TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt
   17 block_statement: opt_eol . stmt opt_eol
   18                | opt_eol . TK_L_BRACE statement_list TK_R_BRACE opt_eol
   25 print: . TK_RW_PRINT expr
   26      | . TK_RW_PRINT expr TK_COMMA print_option
   30 assign: . TK_VARIABLE TK_EQUAL expr

    TK_VARIABLE  shift, and go to state 6
    TK_RW_PRINT  shift, and go to state 7
    TK_RW_IF     shift, and go to state 8
    TK_L_BRACE   shift, and go to state 56

    stmt     go to state 57
    if_stmt  go to state 11
    print    go to state 12
    assign   go to state 13


State 54

   13 if_stmt: TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement . optional_else_stmt
   15 optional_else_stmt: . TK_RW_ELSE block_statement
   16                   | . %empty  [$end, TK_EOL, TK_RW_ELSE, TK_R_BRACE]

    TK_RW_ELSE  shift, and go to state 58

    TK_RW_ELSE  [reduce using rule 16 (optional_else_stmt)]
    $default    reduce using rule 16 (optional_else_stmt)

    optional_else_stmt  go to state 59


State 55

   14 conditional_expr: expr compare_options expr .  [TK_R_PAR]
   31 expr: expr . OP_ADD term
   32     | expr . OP_SUB term

    OP_ADD  shift, and go to state 27
    OP_SUB  shift, and go to state 28

    $default  reduce using rule 14 (conditional_expr)


State 56

    2 statement_list: . statement_list eols stmt
    3               | . stmt
    4 stmt: . print
    5     | . assign
    6     | . if_stmt
   13 if_stmt: . TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt
   18 block_statement: opt_eol TK_L_BRACE . statement_list TK_R_BRACE opt_eol
   25 print: . TK_RW_PRINT expr
   26      | . TK_RW_PRINT expr TK_COMMA print_option
   30 assign: . TK_VARIABLE TK_EQUAL expr

    TK_VARIABLE  shift, and go to state 6
    TK_RW_PRINT  shift, and go to state 7
    TK_RW_IF     shift, and go to state 8

    statement_list  go to state 60
    stmt            go to state 10
    if_stmt         go to state 11
    print           go to state 12
    assign          go to state 13


State 57

    9 opt_eol: . TK_EOL
   10        | . %empty  [$end, TK_EOL, TK_RW_ELSE, TK_R_BRACE]
   17 block_statement: opt_eol stmt . opt_eol

    TK_EOL  shift, and go to state 52

    TK_EOL    [reduce using rule 10 (opt_eol)]
    $default  reduce using rule 10 (opt_eol)

    opt_eol  go to state 61


State 58

    9 opt_eol: . TK_EOL
   10        | . %empty  [TK_VARIABLE, TK_RW_PRINT, TK_RW_IF, TK_L_BRACE]
   15 optional_else_stmt: TK_RW_ELSE . block_statement
   17 block_statement: . opt_eol stmt opt_eol
   18                | . opt_eol TK_L_BRACE statement_list TK_R_BRACE opt_eol

    TK_EOL  shift, and go to state 52

    $default  reduce using rule 10 (opt_eol)

    opt_eol          go to state 53
    block_statement  go to state 62


State 59

   13 if_stmt: TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt .

    $default  reduce using rule 13 (if_stmt)


State 60

    2 statement_list: statement_list . eols stmt
   11 eols: . eols TK_EOL
   12     | . TK_EOL
   18 block_statement: opt_eol TK_L_BRACE statement_list . TK_R_BRACE opt_eol

    TK_EOL      shift, and go to state 1
    TK_R_BRACE  shift, and go to state 63

    eols  go to state 64


State 61

   17 block_statement: opt_eol stmt opt_eol .

    $default  reduce using rule 17 (block_statement)


State 62

   15 optional_else_stmt: TK_RW_ELSE block_statement .

    $default  reduce using rule 15 (optional_else_stmt)


State 63

    9 opt_eol: . TK_EOL
   10        | . %empty  [$end, TK_EOL, TK_RW_ELSE, TK_R_BRACE]
   18 block_statement: opt_eol TK_L_BRACE statement_list TK_R_BRACE . opt_eol

    TK_EOL  shift, and go to state 52

    TK_EOL    [reduce using rule 10 (opt_eol)]
    $default  reduce using rule 10 (opt_eol)

    opt_eol  go to state 65


State 64

    2 statement_list: statement_list eols . stmt
    4 stmt: . print
    5     | . assign
    6     | . if_stmt
   11 eols: eols . TK_EOL
   13 if_stmt: . TK_RW_IF TK_L_PAR conditional_expr TK_R_PAR block_statement optional_else_stmt
   25 print: . TK_RW_PRINT expr
   26      | . TK_RW_PRINT expr TK_COMMA print_option
   30 assign: . TK_VARIABLE TK_EQUAL expr

    TK_VARIABLE  shift, and go to state 6
    TK_EOL       shift, and go to state 14
    TK_RW_PRINT  shift, and go to state 7
    TK_RW_IF     shift, and go to state 8

    stmt     go to state 34
    if_stmt  go to state 11
    print    go to state 12
    assign   go to state 13


State 65

   18 block_statement: opt_eol TK_L_BRACE statement_list TK_R_BRACE opt_eol .

    $default  reduce using rule 18 (block_statement)
